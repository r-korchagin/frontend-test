{"version":3,"sources":["store/modalStore.js","component/tableRow.js","store/postListStore.js","component/table.js","store/userListStore.js","component/modal.js","component/content.js","App.js","serviceWorker.js","index.js"],"names":["ModalStore","this","infoModal","infoID","userID","id","userid","decorate","observable","isModal","computed","getInfoID","getUserID","openInfoModal","action","closeInfoModal","modalStore","TableRow","props","onClick","title","charAt","toUpperCase","slice","PostListStore","self","postList","fetch","then","response","json","posts","post","filter","length","getPostList","getPostCount","getPostByID","observer","className","map","el","index","key","userId","UserListStore","userList","user","getUserList","getUserCount","getUserByID","str","useState","setPost","setUser","closeForm","capitalize","undefined","Modal","show","onShow","onHide","animation","Header","closeButton","Title","Body","Form","Group","name","href","email","address","street","suite","city","zipcode","phone","siteLink","website","rows","value","body","Footer","Button","variant","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0dea4e9.chunk.js","sourcesContent":["import { observable, computed, action, decorate } from \"mobx\";\r\n\r\nclass ModalStore {\r\n  constructor() {\r\n    this.infoModal = false;\r\n    this.infoID = 0;\r\n    this.userID = 0;\r\n  }\r\n\r\n  get isModal() {\r\n    return this.infoModal;\r\n  }\r\n\r\n  get getInfoID() {\r\n    return this.infoID;\r\n  }\r\n\r\n  get getUserID() {\r\n    return this.userID;\r\n  }\r\n\r\n  openInfoModal(id, userid) {\r\n    this.infoModal = true;\r\n    this.infoID = id;\r\n    this.userID = userid;\r\n  }\r\n\r\n  closeInfoModal() {\r\n    this.infoModal = false;\r\n  }\r\n}\r\n\r\ndecorate(ModalStore, {\r\n  infoModal: observable,\r\n  isModal: computed,\r\n  getInfoID: computed,\r\n  getUserID: computed,\r\n  openInfoModal: action,\r\n  closeInfoModal: action\r\n});\r\n\r\nconst modalStore = new ModalStore();\r\n\r\nexport default modalStore;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport modalStore from \"../store/modalStore\";\r\n\r\nconst TableRow = props => {\r\n  return (\r\n    <tr\r\n      onClick={() => {\r\n        modalStore.openInfoModal(props.id, props.userid);\r\n      }}\r\n    >\r\n      <td>{props.id}</td>\r\n      <td>{props.userid}</td>\r\n      <td>{props.title.charAt(0).toUpperCase() + props.title.slice(1)}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nTableRow.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  userid: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default TableRow;\r\n","import { observable, computed, action, decorate } from \"mobx\";\r\n\r\nclass PostListStore {\r\n  constructor() {\r\n    let self = this;\r\n    this.postList = [];\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then(response => response.json())\r\n      .then(posts => (self.postList = posts));\r\n  }\r\n\r\n  get getPostList() {\r\n    return this.postList;\r\n  }\r\n\r\n  get getPostCount() {\r\n    return this.postList.length;\r\n  }\r\n\r\n  getPostByID(id) {\r\n    let post = this.postList.filter(post => post.id === id)[0];\r\n    if (post) return post || \"Unknow post\";\r\n    return \"Unknow post\";\r\n  }\r\n}\r\n\r\ndecorate(PostListStore, {\r\n  postList: observable,\r\n  getPostList: computed,\r\n  getPostCount: computed,\r\n  getPostByID: action\r\n});\r\n\r\nconst postList = new PostListStore();\r\n\r\nexport default postList;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport TableRow from \"./tableRow\";\r\nimport postList from \"../store/postListStore\";\r\n\r\nimport \"./table.css\";\r\n\r\nconst Table = () => {\r\n  return (\r\n    <table className=\"table table-hover\">\r\n      <thead>\r\n        <tr>\r\n          <th>Id</th>\r\n          <th>Userid</th>\r\n          <th>Title</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {postList.getPostList.map((el, index) => {\r\n          return (\r\n            <TableRow\r\n              key={index}\r\n              id={el.id}\r\n              userid={el.userId}\r\n              title={el.title}\r\n            />\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default observer(Table);\r\n","import { observable, computed, action, decorate } from \"mobx\";\r\n\r\nclass UserListStore {\r\n  constructor() {\r\n    let self = this;\r\n    this.userList = [];\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(posts => (self.userList = posts));\r\n  }\r\n\r\n  get getUserList() {\r\n    return this.userList;\r\n  }\r\n\r\n  get getUserCount() {\r\n    return this.userList.length;\r\n  }\r\n\r\n  getUserByID(id) {\r\n    let user = this.userList.filter(user => user.id === id)[0];\r\n    if (user) return user || \"Unknow user\";\r\n    return \"Unknow user\";\r\n  }\r\n}\r\n\r\ndecorate(UserListStore, {\r\n  userList: observable,\r\n  getUserList: computed,\r\n  getUserCount: computed,\r\n  getUserByID: action\r\n});\r\n\r\nconst userList = new UserListStore();\r\n\r\nexport default userList;\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport modalStore from \"../store/modalStore\";\r\nimport postList from \"../store/postListStore\";\r\nimport userList from \"../store/userListStore\";\r\n\r\nconst PostInformationModal = () => {\r\n  const [post, setPost] = useState({});\r\n  const [user, setUser] = useState({});\r\n\r\n  const showInfoModal = () => {\r\n    /* load  information about that given post */\r\n    setPost(postList.getPostByID(modalStore.getInfoID));\r\n    setUser(userList.getUserByID(modalStore.getUserID));\r\n  };\r\n\r\n  const closeForm = () => {\r\n    modalStore.closeInfoModal();\r\n  };\r\n\r\n  const capitalize = str => {\r\n    return str === undefined ? \"\" : str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n  const emailLink = str => {\r\n    return str === undefined ? \"\" : \"mailto:\" + str;\r\n  };\r\n\r\n  const siteLink = str => {\r\n    return str === undefined ? \"\" : \"http://\" + str;\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={modalStore.isModal}\r\n      onShow={showInfoModal}\r\n      onHide={closeForm}\r\n      animation={true}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{capitalize(post.title)}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form.Group>\r\n          <label>\r\n            <strong>Name:</strong> {user.name}\r\n          </label>\r\n          <address>\r\n            <strong>Email:</strong>{\" \"}\r\n            <a href={emailLink(user.email)}>{user.email}</a>.<br />\r\n          </address>\r\n          <address>\r\n            <strong>Address:</strong>\r\n            <br />\r\n            {user.address ? user.address.street : \"\"}\r\n            <br />\r\n            {user.address ? user.address.suite : \"\"}\r\n            <br />\r\n            {user.address ? user.address.city : \"\"}\r\n            <br />\r\n            {user.address ? user.address.zipcode : \"\"}\r\n          </address>\r\n          <address>\r\n            <abbr title=\"Phone\">\r\n              <strong>Phone:</strong>\r\n            </abbr>{\" \"}\r\n            {user.phone}\r\n          </address>\r\n          <address>\r\n            <strong>Web Site: </strong>\r\n            <a href={siteLink(user.website)}>{user.website}</a>\r\n          </address>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <label>\r\n            <strong>Body:</strong>\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            rows=\"4\"\r\n            value={capitalize(post.body)}\r\n          />\r\n        </Form.Group>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={closeForm}>\r\n          Ok\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default observer(PostInformationModal);\r\n","import React from \"react\";\r\nimport Table from \"./table\";\r\nimport InfoModal from \"./modal\";\r\n\r\nconst Content = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h3 className=\"display-4 text-center\">List Posts</h3>\r\n      <Table />\r\n      <InfoModal />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\nimport Content from \"./component/content\";\n\nconst App = () => {\n  return (\n    <div>\n      <Content />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}